diff --git a/image.c b/image.c
index 43808785..0c030645 100644
--- a/image.c
+++ b/image.c
@@ -46,8 +46,11 @@ image_free_all(struct screen *s)
 	struct image	*im, *im1;
 	int		 redraw = !TAILQ_EMPTY(&s->images);

-	TAILQ_FOREACH_SAFE(im, &s->images, entry, im1)
+	TAILQ_FOREACH_SAFE(im, &s->images, entry, im1) {
+		log_debug("%s: image %p retired", __func__, im);
 		image_free(im);
+	}
+
 	return (redraw);
 }

@@ -124,7 +127,10 @@ image_check_line(struct screen *s, u_int py, u_int ny)
 	int		 redraw = 0;

 	TAILQ_FOREACH_SAFE(im, &s->images, entry, im1) {
+		log_debug ("%s: image %p (%d,%d %dx%d) isect with (*,%d *x%d)?",
+			   __func__, im, im->px, im->py, im->sx, im->sy, py, ny);
 		if (py + ny > im->py && py < im->py + im->sy) {
+			log_debug("%s: image %p retired", __func__, im);
 			image_free(im);
 			redraw = 1;
 		}
@@ -139,16 +145,42 @@ image_check_area(struct screen *s, u_int px, u_int py, u_int nx, u_int ny)
 	int		 redraw = 0;

 	TAILQ_FOREACH_SAFE(im, &s->images, entry, im1) {
+		log_debug ("%s: image %p (%d,%d %dx%d) isect with (%d,%d %dx%d)?",
+			   __func__, im, im->px, im->py, im->sx, im->sy,
+			   px, py, nx, ny);
+
 		if (py + ny <= im->py || py >= im->py + im->sy)
 			continue;
 		if (px + nx <= im->px || px >= im->px + im->sx)
 			continue;
+		log_debug("%s: image %p retired", __func__, im);
 		image_free(im);
 		redraw = 1;
 	}
 	return (redraw);
 }

+int
+image_check_area_persist(struct screen *s, u_int px, u_int py, u_int nx, u_int ny)
+{
+	struct image	*im, *im1;
+	int		 isect = 0;
+
+	TAILQ_FOREACH_SAFE(im, &s->images, entry, im1) {
+		log_debug ("%s: image %p (%d,%d %dx%d) isect with (%d,%d %dx%d)?",
+			   __func__, im, im->px, im->py, im->sx, im->sy,
+			   px, py, nx, ny);
+
+		if (py + ny <= im->py || py >= im->py + im->sy)
+			continue;
+		if (px + nx <= im->px || px >= im->px + im->sx)
+			continue;
+		log_debug("%s: image %p intersected", __func__, im);
+		isect = 1;
+	}
+	return (isect);
+}
+
 int
 image_scroll_up(struct screen *s, u_int lines)
 {
@@ -164,6 +196,7 @@ image_scroll_up(struct screen *s, u_int lines)
 			continue;
 		}
 		if (im->py + im->sy <= lines) {
+			log_debug("%s: image %p retired", __func__, im);
 			image_free(im);
 			redraw = 1;
 			continue;
diff --git a/screen-write.c b/screen-write.c
index bce56b8e..614bb127 100644
--- a/screen-write.c
+++ b/screen-write.c
@@ -2022,6 +2022,8 @@ screen_write_cell(struct screen_write_ctx *ctx, const struct grid_cell *gc)
 	if (skip) {
 		if (s->cx >= gl->cellsize)
 			skip = grid_cells_equal(gc, &grid_default_cell);
+		else if (image_check_area_persist(s, s->cx, s->cy, width, 1))
+			skip = 0;
 		else {
 			gce = &gl->celldata[s->cx];
 			if (gce->flags & GRID_FLAG_EXTENDED)
diff --git a/tmux.h b/tmux.h
index d448faa3..ae4125d2 100644
--- a/tmux.h
+++ b/tmux.h
@@ -3561,6 +3561,7 @@ int		 image_free_all(struct screen *);
 struct image	*image_store(struct screen *, struct sixel_image *);
 int		 image_check_line(struct screen *, u_int, u_int);
 int		 image_check_area(struct screen *, u_int, u_int, u_int, u_int);
+int		 image_check_area_persist(struct screen *, u_int, u_int, u_int, u_int);
 int		 image_scroll_up(struct screen *, u_int);

 /* image-sixel.c */
